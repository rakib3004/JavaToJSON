{
    "package": "org.apache.hadoop.mapred",
    "imports": [
        "java.io.IOException",
        "org.apache.hadoop.classification.InterfaceAudience",
        "org.apache.hadoop.classification.InterfaceStability",
        "org.apache.hadoop.conf.Configuration",
        "org.apache.hadoop.fs.LocalDirAllocator",
        "org.apache.hadoop.fs.Path",
        "org.apache.hadoop.mapreduce.JobContext",
        "org.apache.hadoop.mapreduce.MRConfig"
    ],
    "classes": [
        {
            "name": "extends",
            "methods": [
                {
                    "name": "YarnOutputFiles",
                    "args": [
                        "public"
                    ],
                    "body": []
                },
                {
                    "name": "getOutputFileForWriteInVolume",
                    "args": [
                        "public",
                        "Path"
                    ],
                    "body": [
                        "Path outputDir = new Path(existing.getParent(), JOB_OUTPUT_DIR);",
                        "Path attemptOutputDir = new Path(outputDir,",
                        "conf.get(JobContext.TASK_ATTEMPT_ID));",
                        "return new Path(attemptOutputDir, MAP_OUTPUT_FILENAME_STRING);"
                    ]
                },
                {
                    "name": "getOutputIndexFileForWriteInVolume",
                    "args": [
                        "public",
                        "Path"
                    ],
                    "body": [
                        "Path outputDir = new Path(existing.getParent(), JOB_OUTPUT_DIR);",
                        "Path attemptOutputDir = new Path(outputDir,",
                        "conf.get(JobContext.TASK_ATTEMPT_ID));",
                        "return new Path(attemptOutputDir, MAP_OUTPUT_FILENAME_STRING +",
                        "MAP_OUTPUT_INDEX_SUFFIX_STRING);"
                    ]
                },
                {
                    "name": "setConf",
                    "args": [
                        "public",
                        "void"
                    ],
                    "body": [
                        "if (conf instanceof JobConf) {",
                        "this.conf = (JobConf) conf;",
                        "} else {",
                        "this.conf = new JobConf(conf);"
                    ]
                },
                {
                    "name": "getConf",
                    "args": [
                        "public",
                        "Configuration"
                    ],
                    "body": [
                        "return conf;"
                    ]
                }
            ]
        }
    ],
    "methods": [
        {
            "name": "YarnOutputFiles",
            "args": [
                "public"
            ],
            "body": []
        },
        {
            "name": "getOutputFileForWriteInVolume",
            "args": [
                "public",
                "Path"
            ],
            "body": [
                "Path outputDir = new Path(existing.getParent(), JOB_OUTPUT_DIR);",
                "Path attemptOutputDir = new Path(outputDir,",
                "conf.get(JobContext.TASK_ATTEMPT_ID));",
                "return new Path(attemptOutputDir, MAP_OUTPUT_FILENAME_STRING);"
            ]
        },
        {
            "name": "getOutputIndexFileForWriteInVolume",
            "args": [
                "public",
                "Path"
            ],
            "body": [
                "Path outputDir = new Path(existing.getParent(), JOB_OUTPUT_DIR);",
                "Path attemptOutputDir = new Path(outputDir,",
                "conf.get(JobContext.TASK_ATTEMPT_ID));",
                "return new Path(attemptOutputDir, MAP_OUTPUT_FILENAME_STRING +",
                "MAP_OUTPUT_INDEX_SUFFIX_STRING);"
            ]
        },
        {
            "name": "setConf",
            "args": [
                "public",
                "void"
            ],
            "body": [
                "if (conf instanceof JobConf) {",
                "this.conf = (JobConf) conf;",
                "} else {",
                "this.conf = new JobConf(conf);"
            ]
        },
        {
            "name": "getConf",
            "args": [
                "public",
                "Configuration"
            ],
            "body": [
                "return conf;"
            ]
        }
    ]
}